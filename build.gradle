plugins {
    id "fabric-loom" version "1.7-SNAPSHOT"
    id "com.matthewprenger.cursegradle" version "1.4.0"
    id "com.modrinth.minotaur" version "2.+"
}

archivesBaseName = "${project.jar_name}-${project.minecraft_version}"
version = project.mod_version
group = project.maven_group

repositories {
    // Add repositories to retrieve artifacts from in here.
    // You should only use this when depending on other mods because
    // Loom adds the essential maven repositories to download Minecraft and libraries from automatically.
    // See https://docs.gradle.org/current/userguide/declaring_repositories.html
    // for more information about repositories.

    maven { url "https://maven.nucleoid.xyz" }
    maven { url "https://oss.sonatype.org/content/repositories/snapshots" }
    maven { url "https://jitpack.io" }
    maven {
        url "https://cursemaven.com"
        content {
            includeGroup "curse.maven"
        }
    }
    maven {
        name = "Modrinth"
        url = "https://api.modrinth.com/maven"
        content {
            includeGroup "maven.modrinth"
        }
    }
}

dependencies {
    // To change the versions see the gradle.properties file
    minecraft "com.mojang:minecraft:${project.minecraft_version}"
    mappings "net.fabricmc:yarn:${project.yarn_mappings}:v2"
    modImplementation "net.fabricmc:fabric-loader:${project.loader_version}"

    // Fabric API. This is technically optional, but you probably want it anyway.
    modImplementation "net.fabricmc.fabric-api:fabric-api:${project.fabric_version}"

    // Required mod dependencies
    include modImplementation("eu.pb4:placeholder-api:${project.placeholder_version}")
    include implementation("net.dv8tion:JDA:${project.jda_version}") {
        exclude module: "opus-java"
    }

    // Player data api
    modImplementation include("eu.pb4:player-data-api:${project.player_data_version}")

    include implementation("club.minnced:discord-webhooks:${project.webhook_version}")
    include implementation("com.vdurmont:emoji-java:5.1.1")
    include implementation("me.lucko:spark-api:0.1-SNAPSHOT")

    // Technically optional, but you won't have translations without it
    include modRuntimeOnly("xyz.nucleoid:server-translations-api:${project.server_translations_version}")

    // For compatibility with other mods
    modCompileOnly "curse.maven:vanish-424123:${project.vanish_123456687548_version}"
    modCompileOnly "maven.modrinth:vanish:${project.vanish_drexhd_version}"
    modCompileOnly "maven.modrinth:fabrictailor:${project.fabrictailor_version}"

    // Have the compat mods run at runtime too, for debugging
    // modRuntimeOnly "curse.maven:vanish-424123:${project.vanish_123456687548_version}"
    modRuntimeOnly "maven.modrinth:vanish:${project.vanish_drexhd_version}"
    modRuntimeOnly "maven.modrinth:fabrictailor:${project.fabrictailor_version}"
    modRuntimeOnly "com.github.samolego.Config2Brigadier:config2brigadier-fabric:${project.config2brigadier_version}"
    modRuntimeOnly "me.lucko:fabric-permissions-api:${project.fabric_permissions_version}"

    // Required dependencies for Discord integration
    include "org.json:json:20230227"
    include "com.squareup.okio:okio:1.17.2"
    include "com.squareup.okhttp3:okhttp:3.13.0"
    include "org.apache.commons:commons-collections4:4.4"
    include "org.jetbrains.kotlin:kotlin-stdlib:1.6.21"
    include "com.neovisionaries:nv-websocket-client:2.14"
    include "net.sf.trove4j:trove4j:3.0.3"
    include 'com.fasterxml.jackson.core:jackson-databind:2.13.4.1'
    include "com.fasterxml.jackson.core:jackson-annotations:2.13.1"
    include "com.fasterxml.jackson.core:jackson-core:2.13.1"
}

processResources {
    inputs.property "version", project.version
    filteringCharset "UTF-8"

    filesMatching("fabric.mod.json") {
        expand "version": project.version
    }
}

def targetJavaVersion = 21
tasks.withType(JavaCompile).configureEach {
    // ensure that the encoding is set to UTF-8, no matter what the system default is
    // this fixes some edge cases with special characters not displaying correctly
    // see http://yodaconditions.net/blog/fix-for-java-file-encoding-problems-with-gradle.html
    // If Javadoc is generated, this must be specified in that task too.
    it.options.encoding = "UTF-8"
    if (targetJavaVersion >= 10 || JavaVersion.current().isJava10Compatible()) {
        it.options.release = targetJavaVersion
    }
}

java {
    def javaVersion = JavaVersion.toVersion(targetJavaVersion)
    if (JavaVersion.current() < javaVersion) {
        toolchain.languageVersion = JavaLanguageVersion.of(targetJavaVersion)
    }
    // Loom will automatically attach sourcesJar to a RemapSourcesJar task and to the "build" task
    // if it is present.
    // If you remove this line, sources will not be generated.
    withSourcesJar()
}

jar {
    from("LICENSE") {
        rename { "${it}_${project.archivesBaseName}" }
    }
}

curseforge {
    apiKey = System.getenv("CURSEFORGE_TOKEN")
    if (apiKey == null) {
        return
    }

    project {
        id = "630956"
        releaseType = "release"
        changelogType = "markdown"
        changelog = file("CHANGELOG.md")

        addGameVersion project.minecraft_version

        mainArtifact(remapJar) {
            relations {
                requiredDependency "fabric-api"
            }
        }
    }

    options {
        forgeGradleIntegration = false // We're using Loom
    }
}

modrinth {
    token = System.getenv("MODRINTH_TOKEN")
    if (token == null) {
        return
    }

    projectId = "discord4fabricMulti"
    versionNumber = "${project.mod_version}-${project.minecraft_version}"
    versionType = "release"
    uploadFile = remapJar
    gameVersions = [project.minecraft_version]
    changelog = file("CHANGELOG.md").text
    dependencies {
        // scope.type
        // The scope can be `required`, `optional`, `incompatible`, or `embedded`
        // The type can either be `project` or `version`
        required.project "fabric-api"
    }
}